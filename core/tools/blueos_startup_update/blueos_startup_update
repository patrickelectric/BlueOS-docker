#!/usr/bin/env python
import appdirs
import copy
import os
import json
import re
import sys
import time

DELTA_JSON = {
    'core': {
        'binds': {
            '/run/udev': {
                'bind': '/run/udev',
                'mode': 'ro'
            },
            '/etc/machine-id': {
                'bind': '/etc/machine-id',
                'mode': 'ro'
            },
            '/etc/dhcpcd.conf': {
                'bind': '/etc/dhcpcd.conf',
                'mode': 'rw'
            }
        }
    }
}

import collections
from commonwealth.utils.commands import run_command

# Copyright 2016-2022 Paul Durivage
# Licensed under the Apache License, Version 2.0 (the "License");
# Based on: https://gist.github.com/angstwad/bf22d1822c38a92ec0a9
def dict_merge(dct, merge_dct):
    for k, v in merge_dct.items():
        if (k in dct and isinstance(dct[k], dict) and isinstance(merge_dct[k], dict)):  #noqa
            dict_merge(dct[k], merge_dct[k])
        else:
            dct[k] = merge_dct[k]

def update_startup() -> None:
    startup_path = os.path.join(appdirs.user_config_dir('bootstrap'), 'startup.json')
    config = {}
    with open(startup_path, mode="r", encoding="utf-8") as startup_file:
        config = json.load(startup_file)
        old_config = copy.deepcopy(config)
        dict_merge(config, DELTA_JSON)
        if old_config == config:
            print("Configuration did not change, continuing..")
            return

    with open(startup_path, mode="w", encoding="utf-8") as startup_file:
        result = json.dumps(config, indent=4, sort_keys=True)
        startup_file.write(result)
        print("Startup definition changed, system will restart.")
        time.sleep(10)
        sys.exit(1)


def update_cgroups() -> None:
    # add cgroups options to cmdline if they are not there already,
    command = '''sudo sh -c '\
    grep -q cgroup /boot/cmdline.txt || (\
        sed -i '1 s/$/ cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory/' /boot/cmdline.txt; \
    )' '''
    run_command(command, False)


def main() -> None:
    current_git_version = os.getenv('GIT_DESCRIBE_TAGS')
    match = re.match(r'(?P<tag>.*)-(?P<commit_number>\d+)-(?P<commit_hash>[a-z0-9]+)', current_git_version)
    tag, commit_number, commit_hash = match['tag'], match['commit_number'], match['commit_hash']
    print(f"Running BlueOS: {tag=}, {commit_number=}, {commit_hash=}")
    # TODO: parse tag as semver and check before applying patches
    update_startup()
    update_cgroups()

if __name__ == "__main__":
    main()